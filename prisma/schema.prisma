generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  output                = "../doc/dbml"
  includeRelationFields = "false"
  projectDatabaseType   = "PostgreSQL"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model form_attached_files {
  form_attached_file_id String         @id(map: "form_attached_files_pk") @db.Uuid
  project_report_id     String         @db.Uuid
  file_name             String         @db.VarChar(255)
  file_path             String
  created_at            DateTime       @default(now()) @db.Timestamp(6)
  updated_at            DateTime       @default(now()) @db.Timestamp(6)
  upload_user_id        String         @db.Uuid
  project_report        project_report @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "form_attached_files_project_report_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model progress_check_report {
  progress_check_report_id       String                           @id(map: "work_in_progress_pk") @db.Uuid
  project_report_id              String                           @unique(map: "progress_check_report_unique") @db.Uuid
  execution_budget_unit_id       String                           @db.Uuid
  progress_report_data           Json                             @db.Json
  total_performance_percentage   Decimal                          @default(0.0) @db.Decimal(3, 1)
  created_at                     DateTime                         @default(now()) @db.Timestamp(6)
  updated_at                     DateTime                         @default(now()) @db.Timestamp(6)
  consumed_workers_percentage    Decimal                          @default(0.0) @db.Decimal(3, 2)
  title                          String?
  report_text                    String?
  project_report                 project_report                   @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "progress_report_project_report_fk")
  progress_check_reported_worker progress_check_reported_worker[]
}

model progress_check_reported_worker {
  progress_check_reported_worker_id String                @id(map: "progress_check_reported_worker_pk") @db.Uuid
  progress_check_report_id          String                @db.Uuid
  created_at                        DateTime              @default(now()) @db.Timestamp(6)
  updated_at                        DateTime              @default(now()) @db.Timestamp(6)
  worker_id                         String                @db.Uuid
  progress_check_report             progress_check_report @relation(fields: [progress_check_report_id], references: [progress_check_report_id], onDelete: Cascade, map: "progress_check_reported_worker_progress_check_report_fk")

  @@unique([worker_id, progress_check_report_id], map: "progress_check_reported_worker_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model project_budget_change {
  project_budget_id  String         @id(map: "project_budget_change_pk") @db.Uuid
  change_reason_code String         @db.VarChar(20)
  created_at         DateTime       @default(now()) @db.Timestamp(6)
  updated_at         DateTime       @default(now()) @db.Timestamp(6)
  project_report_id  String         @unique(map: "project_budget_change_unique") @db.Uuid
  billing_client_id  String         @db.Uuid
  title              String?
  report_text        String?
  project_report     project_report @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "project_budget_change_project_report_fk")
}

model project_close_report {
  project_close_report_id String         @id(map: "close_report_pk") @db.Uuid
  close_report_checklist  Json           @db.Json
  created_at              DateTime       @default(now()) @db.Timestamp(6)
  updated_at              DateTime       @default(now()) @db.Timestamp(6)
  project_report_id       String         @unique(map: "project_close_report_unique") @db.Uuid
  project_report          project_report @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "close_report_project_report_fk")
}

model project_common_report {
  project_common_report_id String         @id(map: "project_common_report_pk") @db.Uuid
  created_at               DateTime       @default(now()) @db.Timestamp(6)
  updated_at               DateTime       @default(now()) @db.Timestamp(6)
  project_report_id        String         @unique(map: "project_common_report_unique") @db.Uuid
  title                    String?
  report_text              String?
  project_report           project_report @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "project_common_report_project_report_fk")
}

model project_meeting_report {
  project_meeting_report_id String         @id(map: "project_meeting_report_pk") @db.Uuid
  created_at                DateTime       @default(now()) @db.Timestamp(6)
  updated_at                DateTime       @default(now()) @db.Timestamp(6)
  project_report_id         String         @unique(map: "project_meeting_report_unique") @db.Uuid
  title                     String?
  report_text               String?
  project_report            project_report @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "project_meeting_report_1_project_report_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model project_report {
  project_report_id            String                        @id(map: "common_report_pk") @db.Uuid
  created_at                   DateTime                      @default(now()) @db.Timestamp(6)
  updated_at                   DateTime                      @default(now()) @db.Timestamp(6)
  create_user_id               String                        @db.Uuid
  report_date                  DateTime                      @default(now()) @db.Date
  project_id                   String                        @db.Uuid
  form_attached_files          form_attached_files[]
  progress_check_report        progress_check_report?
  project_budget_change        project_budget_change?
  project_close_report         project_close_report?
  project_common_report        project_common_report?
  project_meeting_report       project_meeting_report?
  project_status_update_report project_status_update_report?
  project_worker_report        project_worker_report?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model project_status_update_report {
  project_status_update_report_id String         @id(map: "project_status_update_report_pk") @db.Uuid
  created_at                      DateTime       @default(now()) @db.Timestamp(6)
  updated_at                      DateTime       @default(now()) @db.Timestamp(6)
  create_user_id                  String         @db.Uuid
  project_report_id               String         @unique(map: "project_status_update_report_unique") @db.Uuid
  project_status_id               String         @db.Uuid
  title                           String?
  report_text                     String?
  project_report                  project_report @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "project_status_update_report_project_report_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model project_worker_report {
  project_worker_report_id String             @id(map: "project_worker_report_pk") @db.Uuid
  report_type_code         String?            @db.VarChar(20)
  title                    String?
  report_text              String?
  created_at               DateTime           @default(now()) @db.Timestamp(6)
  updated_at               DateTime           @default(now()) @db.Timestamp(6)
  project_report_id        String             @unique(map: "project_worker_report_unique") @db.Uuid
  project_report           project_report     @relation(fields: [project_report_id], references: [project_report_id], onDelete: Cascade, map: "project_worker_report_project_report_fk")
  reported_workers         reported_workers[]
}

model reported_workers {
  reported_workers_id      String                @id(map: "reported_workers_pk") @db.Uuid
  worker_id                String                @db.Uuid
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  project_worker_report_id String                @db.Uuid
  project_worker_report    project_worker_report @relation(fields: [project_worker_report_id], references: [project_worker_report_id], onDelete: Cascade, map: "reported_workers_project_worker_report_fk")
}
