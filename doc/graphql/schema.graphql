"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Diary`."""
  diaries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diary`."""
    orderBy: [DiariesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiaryCondition
  ): DiariesConnection
  diary(id: String!): Diary

  """Reads a single `Diary` using its globally unique `ID`."""
  diaryByNodeId(
    """The globally unique `ID` to be used in selecting a single `Diary`."""
    nodeId: ID!
  ): Diary
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Diary` values."""
type DiariesConnection {
  """A list of `Diary` objects."""
  nodes: [Diary!]!

  """
  A list of edges which contains the `Diary` and cursor to aid in pagination.
  """
  edges: [DiariesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Diary` you could get from the connection."""
  totalCount: Int!
}

type Diary implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
}

"""A `Diary` edge in the connection."""
type DiariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Diary` at the end of the edge."""
  node: Diary!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Diary`."""
enum DiariesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Diary` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DiaryCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
}
