{"version":3,"sources":["../../src/utility/app.config.ts"],"sourcesContent":["import assert from 'assert';\n\nimport { Injectable, LogLevel } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { CustomLogger } from 'src/utility';\n\n@Injectable()\nexport class AppConfig {\n  private static env = process.env.NODE_ENV;\n\n  static LoggingLogLevel(): LogLevel[] {\n    const env = AppConfig.env;\n\n    switch (env) {\n      case 'test':\n        return ['error', 'warn', 'debug'];\n      case 'local':\n        return ['log', 'error', 'warn', 'debug', 'verbose', 'fatal'];\n      case 'dev':\n      case 'development':\n        return ['log', 'error', 'warn', 'fatal'];\n      case 'production':\n        return ['log', 'error', 'fatal'];\n    }\n\n    return ['log', 'error', 'warn', 'debug', 'verbose', 'fatal'];\n  }\n  static switchGraphileConfig<T, U>(development: T, production: U): T | U {\n    const env = AppConfig.env;\n    if (env && ['development', 'dev', 'production'].includes(env)) {\n      return production;\n    }\n\n    return development;\n  }\n\n  static get DatabaseUrl(): string {\n    const env = process.env.DATABASE_URL;\n    if (!env) {\n      assert('DATABASE_URL not found!!');\n    }\n\n    return env ?? '';\n  }\n\n  static get isLocal(): boolean {\n    return AppConfig.env === 'local';\n  }\n\n  readonly logger = new CustomLogger('AppConfigService');\n  private readonly node_env: string;\n\n  constructor(private readonly configService: ConfigService) {\n    const env = this.configService.getOrThrow<string>('NODE_ENV');\n    this.logger.debug(`NODE_ENV: ${env}`);\n\n    this.node_env = env;\n  }\n\n  get port(): string {\n    return this.configService.getOrThrow<string>('PORT') ?? '3030';\n  }\n\n  private get isLocal(): boolean {\n    return this.node_env === 'local';\n  }\n  private get isDevelopment(): boolean {\n    return ['development', 'dev'].includes(this.node_env);\n  }\n  get isValidationDisableErrorMessage(): boolean {\n    return !(this.isLocal || this.isDevelopment);\n  }\n\n  switchSwaggerSetup(func: () => any) {\n    if (this.isLocal === true) {\n      return func();\n    }\n  }\n}\n"],"names":["assert","Injectable","ConfigService","CustomLogger","AppConfig","LoggingLogLevel","env","switchGraphileConfig","development","production","includes","DatabaseUrl","process","DATABASE_URL","isLocal","port","configService","getOrThrow","node_env","isDevelopment","isValidationDisableErrorMessage","switchSwaggerSetup","func","constructor","logger","debug","NODE_ENV"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAY,SAAS;AAE5B,SAASC,UAAU,QAAkB,iBAAiB;AACtD,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,YAAY,QAAQ,aAAc;AAG3C,OAAO,MAAMC;IAGX,OAAOC,kBAA8B;QACnC,MAAMC,MAAMF,UAAUE,GAAG;QAEzB,OAAQA;YACN,KAAK;gBACH,OAAO;oBAAC;oBAAS;oBAAQ;iBAAQ;YACnC,KAAK;gBACH,OAAO;oBAAC;oBAAO;oBAAS;oBAAQ;oBAAS;oBAAW;iBAAQ;YAC9D,KAAK;YACL,KAAK;gBACH,OAAO;oBAAC;oBAAO;oBAAS;oBAAQ;iBAAQ;YAC1C,KAAK;gBACH,OAAO;oBAAC;oBAAO;oBAAS;iBAAQ;QACpC;QAEA,OAAO;YAAC;YAAO;YAAS;YAAQ;YAAS;YAAW;SAAQ;IAC9D;IACA,OAAOC,qBAA2BC,WAAc,EAAEC,UAAa,EAAS;QACtE,MAAMH,MAAMF,UAAUE,GAAG;QACzB,IAAIA,OAAO;YAAC;YAAe;YAAO;SAAa,CAACI,QAAQ,CAACJ,MAAM;YAC7D,OAAOG;QACT;QAEA,OAAOD;IACT;IAEA,WAAWG,cAAsB;QAC/B,MAAML,MAAMM,QAAQN,GAAG,CAACO,YAAY;QACpC,IAAI,CAACP,KAAK;YACRN,OAAO;QACT;QAEA,OAAOM,OAAO;IAChB;IAEA,WAAWQ,UAAmB;QAC5B,OAAOV,UAAUE,GAAG,KAAK;IAC3B;IAYA,IAAIS,OAAe;QACjB,OAAO,IAAI,CAACC,aAAa,CAACC,UAAU,CAAS,WAAW;IAC1D;IAEA,IAAYH,UAAmB;QAC7B,OAAO,IAAI,CAACI,QAAQ,KAAK;IAC3B;IACA,IAAYC,gBAAyB;QACnC,OAAO;YAAC;YAAe;SAAM,CAACT,QAAQ,CAAC,IAAI,CAACQ,QAAQ;IACtD;IACA,IAAIE,kCAA2C;QAC7C,OAAO,CAAE,CAAA,IAAI,CAACN,OAAO,IAAI,IAAI,CAACK,aAAa,AAAD;IAC5C;IAEAE,mBAAmBC,IAAe,EAAE;QAClC,IAAI,IAAI,CAACR,OAAO,KAAK,MAAM;YACzB,OAAOQ;QACT;IACF;IAzBAC,YAAY,AAAiBP,aAA4B,CAAE;aAA9BA,gBAAAA;aAHpBQ,SAAS,IAAIrB,aAAa;QAIjC,MAAMG,MAAM,IAAI,CAACU,aAAa,CAACC,UAAU,CAAS;QAClD,IAAI,CAACO,MAAM,CAACC,KAAK,CAAC,CAAC,UAAU,EAAEnB,KAAK;QAEpC,IAAI,CAACY,QAAQ,GAAGZ;IAClB;AAqBF;AAvEaF,UACIE,MAAMM,QAAQN,GAAG,CAACoB,QAAQ"}