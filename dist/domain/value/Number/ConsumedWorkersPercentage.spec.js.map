{"version":3,"sources":["../../../../src/domain/value/Number/ConsumedWorkersPercentage.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { ConsumedWorkersPercentage } from './ConsumedWorkersPercentage';\n\ndescribe('ConsumedWorkersPercentage', () => {\n  it('should return ConsumedWorkersPercentage when input is valid', () => {\n    fc.assert(\n      fc.property(fc.stringMatching(/^[0-9](\\.[0-9]{1,2})?$/), (percentage) => {\n        const value = ConsumedWorkersPercentage.from(percentage);\n        expect(value).toBeInstanceOf(ConsumedWorkersPercentage);\n        expect(value.toValue()).toEqual(percentage);\n      }),\n    );\n  });\n  it('should return ConsumedWorkersPercentage with 0.0 when call new', () => {\n    const value = ConsumedWorkersPercentage.new();\n    expect(value).toBeInstanceOf(ConsumedWorkersPercentage);\n    expect(value.toValue()).toEqual('0.0');\n  });\n  it('should throw an error when input is not a number', () => {\n    fc.assert(\n      fc.property(\n        fc.string().filter((val) => Number.isNaN(Number(val))),\n        (percentage) => {\n          expect(() => ConsumedWorkersPercentage.from(percentage)).toThrow(\n            'ConsumedWorkersPercentage must be number',\n          );\n        },\n      ),\n    );\n  });\n  it('should throw an error when input is negative ', () => {\n    fc.assert(\n      fc.property(\n        fc.stringMatching(/^\\-[1-9](\\.[1-9]{1,2})?$/),\n        (percentage) => {\n          expect(() => ConsumedWorkersPercentage.from(percentage)).toThrow(\n            'ConsumedWorkersPercentage must be positive',\n          );\n        },\n      ),\n    );\n  });\n  it('should throw an error when input not Decimal(3,2)', () => {\n    fc.assert(\n      fc.property(\n        fc.oneof(\n          fc.stringMatching(/^[0-9]{1,3}(\\.[1-9]{3,})$/),\n          fc.stringMatching(/^[1-9]{4,}(\\.[1-9]{1,2})$/),\n        ),\n        (percentage) => {\n          expect(() => ConsumedWorkersPercentage.from(percentage)).toThrow(\n            'ConsumedWorkersPercentage must be Decimal(3,2)',\n          );\n        },\n      ),\n    );\n  });\n  it('should throw an error when input contain e', () => {\n    fc.assert(\n      fc.property(\n        fc.oneof(fc.stringMatching(/^[0-9]{1,2}(\\.[1-9]{1,2}e[1-9])$/)),\n        (percentage) => {\n          expect(() => ConsumedWorkersPercentage.from(percentage)).toThrow(\n            'ConsumedWorkersPercentage must be Decimal(3,2)',\n          );\n        },\n      ),\n    );\n  });\n  describe('equals', () => {\n    it('should return true when compare two ConsumedWorkersPercentage has same value', () => {\n      fc.assert(\n        fc.property(\n          fc.stringMatching(/^[0-9](\\.[0-9]{1,2})?$/),\n          (percentage) => {\n            const value1 = ConsumedWorkersPercentage.from(percentage);\n            const value2 = ConsumedWorkersPercentage.from(percentage);\n            expect(value1).toBeInstanceOf(ConsumedWorkersPercentage);\n            expect(value2).toBeInstanceOf(ConsumedWorkersPercentage);\n            expect(value1.toValue()).toEqual(percentage);\n            expect(value2.toValue()).toEqual(percentage);\n            expect(value1.equals(value2)).toBe(true);\n          },\n        ),\n      );\n    });\n    it('should return true when compare two ConsumedWorkersPercentage has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              percentage1: fc.stringMatching(/^[0-9](\\.[0-9]{1,2})?$/),\n              percentage2: fc.stringMatching(/^[0-9](\\.[0-9]{1,2})?$/),\n            })\n            .filter(\n              ({ percentage1, percentage2 }) => percentage1 !== percentage2,\n            ),\n          ({ percentage1, percentage2 }) => {\n            const value1 = ConsumedWorkersPercentage.from(percentage1);\n            const value2 = ConsumedWorkersPercentage.from(percentage2);\n            expect(value1).toBeInstanceOf(ConsumedWorkersPercentage);\n            expect(value2).toBeInstanceOf(ConsumedWorkersPercentage);\n            expect(value1.toValue()).toEqual(percentage1);\n            expect(value2.toValue()).toEqual(percentage2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","ConsumedWorkersPercentage","assert","property","stringMatching","percentage","value","from","toBeInstanceOf","toValue","toEqual","new","string","filter","val","Number","isNaN","toThrow","oneof","value1","value2","equals","toBe","record","percentage1","percentage2"],"mappings":"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"}