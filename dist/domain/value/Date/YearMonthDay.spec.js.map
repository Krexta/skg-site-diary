{"version":3,"sources":["../../../../src/domain/value/Date/YearMonthDay.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it, vi } from 'vitest';\n\nimport { YEAR_MONTH_DAY_FORMAT, YearMonthDay } from './YearMonthDay';\n\ndescribe('YearMonthDay', () => {\n  it('should return YearMonthDay when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .date({ min: new Date(0), max: new Date(9999, 11, 31) })\n          .map((date) => {\n            const year = date.getFullYear().toString().padStart(4, '0');\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const day = date.getDate().toString().padStart(2, '0');\n            return { year, month, day, date: `${year}-${month}-${day}` };\n          }),\n        ({ year, month, day, date }) => {\n          const value = YearMonthDay.from(date);\n\n          expect(value).toBeInstanceOf(YearMonthDay);\n\n          expect(value.yearString).toEqual(year);\n          expect(value.monthString).toEqual(month);\n          expect(value.dayString).toEqual(day);\n\n          expect(value.year).toBe(Number(year));\n          expect(value.month).toBe(Number(month));\n          expect(value.day).toBe(Number(day));\n\n          expect(value.toString()).toEqual(date);\n        },\n      ),\n    );\n  });\n  it('should throw invalid year exception when input invalid year', () => {\n    fc.assert(\n      fc.property(fc.string({ minLength: 1, maxLength: 3 }), (year) => {\n        expect(() => YearMonthDay.from(`${year}-01-01`)).toThrow(\n          /Invalid Year/,\n        );\n      }),\n    );\n  });\n  it('should throw invalid month exception when input invalid month', () => {\n    fc.assert(\n      fc.property(\n        fc.integer({ min: 13, max: 23 }).map((v) => v.toString()),\n        (month) => {\n          expect(() => YearMonthDay.from(`2024-${month}-01`)).toThrow(\n            /Invalid Month/,\n          );\n        },\n      ),\n    );\n  });\n  it('should throw invalid day exception when input invalid day', () => {\n    fc.assert(\n      fc.property(fc.integer({ min: 32, max: 99 }), (day) => {\n        expect(() => YearMonthDay.from(`2024-11-${day}`)).toThrow(\n          /Invalid Day/,\n        );\n      }),\n    );\n  });\n  it('should return YearMonthDay when input is 02/29 in leap year', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .integer({ min: 0, max: 9999 })\n          .map((year) => year.toString().padStart(4, '0')),\n        (year) => {\n          //is leap year\n          fc.pre(\n            (Number(year) % 4 === 0 && Number(year) % 100 !== 0) ||\n              Number(year) % 400 === 0,\n          );\n          const day = '29';\n          const month = '02';\n          const date = `${year}-${month}-${day}`;\n          const value = YearMonthDay.from(date);\n\n          expect(value).toBeInstanceOf(YearMonthDay);\n\n          expect(value.yearString).toEqual(year);\n          expect(value.monthString).toEqual(month);\n          expect(value.dayString).toEqual(day);\n\n          expect(value.year).toBe(Number(year));\n          expect(value.month).toBe(Number(month));\n          expect(value.day).toBe(Number(day));\n\n          expect(value.toString()).toEqual(date);\n        },\n      ),\n    );\n  });\n  it('should throw invalid day exception when input is 02/29 in non-leap year', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .integer({ min: 0, max: 9999 })\n          .map((year) => year.toString().padStart(4, '0')),\n        (year) => {\n          fc.pre(\n            !(\n              (Number(year) % 4 === 0 && Number(year) % 100 !== 0) ||\n              Number(year) % 400 === 0\n            ),\n          );\n          const day = '29';\n          const month = '02';\n          const date = `${year}-${month}-${day}`;\n          expect(() => YearMonthDay.from(date)).toThrow(/Invalid Day/);\n        },\n      ),\n    );\n  });\n  describe('toDate', () => {\n    it('should return Date when call toDate', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .date({ min: new Date(0), max: new Date(9999, 11, 31) })\n            .map((date) => {\n              const year = date.getFullYear().toString().padStart(4, '0');\n              const month = (date.getMonth() + 1).toString().padStart(2, '0');\n              const day = date.getDate().toString().padStart(2, '0');\n              return `${year}-${month}-${day}`;\n            }),\n          (date) => {\n            const value = YearMonthDay.from(date);\n\n            expect(value).toBeInstanceOf(YearMonthDay);\n\n            expect(value.toString()).toEqual(date);\n            expect(value.toDate()).toEqual(new Date(date));\n          },\n        ),\n      );\n    });\n  });\n  describe('current', () => {\n    it('should return current YearMonthDay when call current', () => {\n      fc.assert(\n        fc.property(\n          fc.date({ min: new Date(0), max: new Date(9999, 11, 31) }),\n          (mockDate) => {\n            vi.setSystemTime(mockDate);\n            const value = YearMonthDay.current();\n            expect(value.toString()).toEqual(\n              format(mockDate, YEAR_MONTH_DAY_FORMAT),\n            );\n            vi.useRealTimers();\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["format","fc","describe","expect","it","vi","YEAR_MONTH_DAY_FORMAT","YearMonthDay","assert","property","date","min","Date","max","map","year","getFullYear","toString","padStart","month","getMonth","day","getDate","value","from","toBeInstanceOf","yearString","toEqual","monthString","dayString","toBe","Number","string","minLength","maxLength","toThrow","integer","v","pre","toDate","mockDate","setSystemTime","current","useRealTimers"],"mappings":"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"}