{"version":3,"sources":["../../../../src/domain/value/String/ChangeReasonCode.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  CHANGE_REASON_CODE_LIST,\n  CHANGE_REASON_CODE_TYPE,\n  ChangeReasonCode,\n} from './ChangeReasonCode';\n\ndescribe('ChangeReasonCode', () => {\n  it('should return ChangeReasonCode when input is valid', () => {\n    fc.assert(\n      fc.property(fc.constantFrom(...CHANGE_REASON_CODE_LIST), (code) => {\n        const value = ChangeReasonCode.from(code);\n        expect(value).toBeInstanceOf(ChangeReasonCode);\n        expect(value.value).toEqual(code);\n      }),\n    );\n  });\n  it('should throw an error when input is invalid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string()\n          .filter(\n            (val) =>\n              !CHANGE_REASON_CODE_LIST.includes(val as CHANGE_REASON_CODE_TYPE),\n          ),\n        (code) => {\n          expect(() => ChangeReasonCode.from(code)).toThrow(\n            'Invalid change reason code',\n          );\n        },\n      ),\n    );\n  });\n\n  describe('equals', () => {\n    it('should return true when compare two ChangeReasonCode has same value', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...CHANGE_REASON_CODE_LIST), (code) => {\n          const value1 = ChangeReasonCode.from(code);\n          const value2 = ChangeReasonCode.from(code);\n          expect(value1).toBeInstanceOf(ChangeReasonCode);\n          expect(value2).toBeInstanceOf(ChangeReasonCode);\n          expect(value1.value).toEqual(code);\n          expect(value2.value).toEqual(code);\n          expect(value1.equals(value2)).toBe(true);\n        }),\n      );\n    });\n    it('should return true when compare two ChangeReasonCode has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              code1: fc.constantFrom(...CHANGE_REASON_CODE_LIST),\n              code2: fc.constantFrom(...CHANGE_REASON_CODE_LIST),\n            })\n            .filter(({ code1, code2 }) => code1 !== code2),\n          ({ code1, code2 }) => {\n            const value1 = ChangeReasonCode.from(code1);\n            const value2 = ChangeReasonCode.from(code2);\n            expect(value1).toBeInstanceOf(ChangeReasonCode);\n            expect(value2).toBeInstanceOf(ChangeReasonCode);\n            expect(value1.value).toEqual(code1);\n            expect(value2.value).toEqual(code2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","CHANGE_REASON_CODE_LIST","ChangeReasonCode","assert","property","constantFrom","code","value","from","toBeInstanceOf","toEqual","string","filter","val","includes","toThrow","value1","value2","equals","toBe","record","code1","code2"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SACEC,uBAAuB,EAEvBC,gBAAgB,QACX,wBAAqB;AAE5BJ,SAAS,oBAAoB;IAC3BE,GAAG,sDAAsD;QACvDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,YAAY,IAAIJ,0BAA0B,CAACK;YACxD,MAAMC,QAAQL,iBAAiBM,IAAI,CAACF;YACpCP,OAAOQ,OAAOE,cAAc,CAACP;YAC7BH,OAAOQ,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAEJ;IACAN,GAAG,+CAA+C;QAChDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGc,MAAM,GACNC,MAAM,CACL,CAACC,MACC,CAACZ,wBAAwBa,QAAQ,CAACD,OAExC,CAACP;YACCP,OAAO,IAAMG,iBAAiBM,IAAI,CAACF,OAAOS,OAAO,CAC/C;QAEJ;IAGN;IAEAjB,SAAS,UAAU;QACjBE,GAAG,uEAAuE;YACxEH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,YAAY,IAAIJ,0BAA0B,CAACK;gBACxD,MAAMU,SAASd,iBAAiBM,IAAI,CAACF;gBACrC,MAAMW,SAASf,iBAAiBM,IAAI,CAACF;gBACrCP,OAAOiB,QAAQP,cAAc,CAACP;gBAC9BH,OAAOkB,QAAQR,cAAc,CAACP;gBAC9BH,OAAOiB,OAAOT,KAAK,EAAEG,OAAO,CAACJ;gBAC7BP,OAAOkB,OAAOV,KAAK,EAAEG,OAAO,CAACJ;gBAC7BP,OAAOiB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAEJ;QACAnB,GAAG,6EAA6E;YAC9EH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGuB,MAAM,CAAC;gBACNC,OAAOxB,GAAGQ,YAAY,IAAIJ;gBAC1BqB,OAAOzB,GAAGQ,YAAY,IAAIJ;YAC5B,GACCW,MAAM,CAAC,CAAC,EAAES,KAAK,EAAEC,KAAK,EAAE,GAAKD,UAAUC,QAC1C,CAAC,EAAED,KAAK,EAAEC,KAAK,EAAE;gBACf,MAAMN,SAASd,iBAAiBM,IAAI,CAACa;gBACrC,MAAMJ,SAASf,iBAAiBM,IAAI,CAACc;gBACrCvB,OAAOiB,QAAQP,cAAc,CAACP;gBAC9BH,OAAOkB,QAAQR,cAAc,CAACP;gBAC9BH,OAAOiB,OAAOT,KAAK,EAAEG,OAAO,CAACW;gBAC7BtB,OAAOkB,OAAOV,KAAK,EAAEG,OAAO,CAACY;gBAC7BvB,OAAOiB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}