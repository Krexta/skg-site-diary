{"version":3,"sources":["../../../../src/domain/value/String/FilePath.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { FilePath } from './FilePath';\n\ndescribe('FilePath', () => {\n  it('should return FilePath when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        (filePath) => {\n          const value = FilePath.from(filePath);\n          expect(value).toBeInstanceOf(FilePath);\n          expect(value.value).toEqual(filePath);\n        },\n      ),\n    );\n  });\n  it('should throw an error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (filePath) => {\n        expect(() => FilePath.from(filePath)).toThrow(\n          'FilePath must be not empty',\n        );\n      }),\n    );\n  });\n  describe('equals', () => {\n    it('should return true when compare two FilePath has same value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1 })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          (filePath) => {\n            const value1 = FilePath.from(filePath);\n            const value2 = FilePath.from(filePath);\n            expect(value1).toBeInstanceOf(FilePath);\n            expect(value2).toBeInstanceOf(FilePath);\n            expect(value1.value).toEqual(filePath);\n            expect(value2.value).toEqual(filePath);\n            expect(value1.equals(value2)).toBe(true);\n          },\n        ),\n      );\n    });\n    it('should return true when compare two FilePath has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              filePath1: fc\n                .string({ minLength: 1 })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n              filePath2: fc\n                .string({ minLength: 1 })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n            })\n            .filter(({ filePath1, filePath2 }) => filePath1 !== filePath2),\n          ({ filePath1, filePath2 }) => {\n            const value1 = FilePath.from(filePath1);\n            const value2 = FilePath.from(filePath2);\n            expect(value1).toBeInstanceOf(FilePath);\n            expect(value2).toBeInstanceOf(FilePath);\n            expect(value1.value).toEqual(filePath1);\n            expect(value2.value).toEqual(filePath2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","FilePath","assert","property","string","minLength","map","val","trim","filter","length","filePath","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","value1","value2","equals","toBe","record","filePath1","filePath2"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,QAAQ,QAAQ,gBAAa;AAEtCH,SAAS,YAAY;IACnBE,GAAG,8CAA8C;QAC/CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGO,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,IACjC,CAACC;YACC,MAAMC,QAAQX,SAASY,IAAI,CAACF;YAC5BZ,OAAOa,OAAOE,cAAc,CAACb;YAC7BF,OAAOa,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAGN;IACAX,GAAG,6CAA6C;QAC9CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGmB,YAAY,CAAC,IAAI,KAAK,OAAO,CAACL;YAC3CZ,OAAO,IAAME,SAASY,IAAI,CAACF,WAAWM,OAAO,CAC3C;QAEJ;IAEJ;IACAnB,SAAS,UAAU;QACjBE,GAAG,+DAA+D;YAChEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGO,MAAM,CAAC;gBAAEC,WAAW;YAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,IACjC,CAACC;gBACC,MAAMO,SAASjB,SAASY,IAAI,CAACF;gBAC7B,MAAMQ,SAASlB,SAASY,IAAI,CAACF;gBAC7BZ,OAAOmB,QAAQJ,cAAc,CAACb;gBAC9BF,OAAOoB,QAAQL,cAAc,CAACb;gBAC9BF,OAAOmB,OAAON,KAAK,EAAEG,OAAO,CAACJ;gBAC7BZ,OAAOoB,OAAOP,KAAK,EAAEG,OAAO,CAACJ;gBAC7BZ,OAAOmB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;QACArB,GAAG,qEAAqE;YACtEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGyB,MAAM,CAAC;gBACNC,WAAW1B,GACRO,MAAM,CAAC;oBAAEC,WAAW;gBAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;gBACjCc,WAAW3B,GACRO,MAAM,CAAC;oBAAEC,WAAW;gBAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;YACnC,GACCD,MAAM,CAAC,CAAC,EAAEc,SAAS,EAAEC,SAAS,EAAE,GAAKD,cAAcC,YACtD,CAAC,EAAED,SAAS,EAAEC,SAAS,EAAE;gBACvB,MAAMN,SAASjB,SAASY,IAAI,CAACU;gBAC7B,MAAMJ,SAASlB,SAASY,IAAI,CAACW;gBAC7BzB,OAAOmB,QAAQJ,cAAc,CAACb;gBAC9BF,OAAOoB,QAAQL,cAAc,CAACb;gBAC9BF,OAAOmB,OAAON,KAAK,EAAEG,OAAO,CAACQ;gBAC7BxB,OAAOoB,OAAOP,KAAK,EAAEG,OAAO,CAACS;gBAC7BzB,OAAOmB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}