{"version":3,"sources":["../../../../src/domain/value/String/ProjectStatusCode.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  PROJECT_STATUS_CODE_LIST,\n  PROJECT_STATUS_CODE_TYPE,\n  ProjectStatusCode,\n} from './ProjectStatusCode';\n\ndescribe('ProjectStatusCode', () => {\n  it('should return ProjectStatusCode when input is valid', () => {\n    fc.assert(\n      fc.property(fc.constantFrom(...PROJECT_STATUS_CODE_LIST), (code) => {\n        const value = ProjectStatusCode.from(code);\n        expect(value).toBeInstanceOf(ProjectStatusCode);\n        expect(value.value).toEqual(code);\n      }),\n    );\n  });\n  it('should throw an error when input is invalid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string()\n          .filter(\n            (val) =>\n              !PROJECT_STATUS_CODE_LIST.includes(\n                val as PROJECT_STATUS_CODE_TYPE,\n              ),\n          ),\n        (code) => {\n          expect(() => ProjectStatusCode.from(code)).toThrow(\n            'Invalid project status code',\n          );\n        },\n      ),\n    );\n  });\n\n  describe('equals', () => {\n    it('should return true when compare two ProjectStatusCode has same value', () => {\n      fc.assert(\n        fc.property(fc.constantFrom(...PROJECT_STATUS_CODE_LIST), (code) => {\n          const value1 = ProjectStatusCode.from(code);\n          const value2 = ProjectStatusCode.from(code);\n          expect(value1).toBeInstanceOf(ProjectStatusCode);\n          expect(value2).toBeInstanceOf(ProjectStatusCode);\n          expect(value1.value).toEqual(code);\n          expect(value2.value).toEqual(code);\n          expect(value1.equals(value2)).toBe(true);\n        }),\n      );\n    });\n    it('should return true when compare two ProjectStatusCode has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              code1: fc.constantFrom(...PROJECT_STATUS_CODE_LIST),\n              code2: fc.constantFrom(...PROJECT_STATUS_CODE_LIST),\n            })\n            .filter(({ code1, code2 }) => code1 !== code2),\n          ({ code1, code2 }) => {\n            const value1 = ProjectStatusCode.from(code1);\n            const value2 = ProjectStatusCode.from(code2);\n            expect(value1).toBeInstanceOf(ProjectStatusCode);\n            expect(value2).toBeInstanceOf(ProjectStatusCode);\n            expect(value1.value).toEqual(code1);\n            expect(value2.value).toEqual(code2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","PROJECT_STATUS_CODE_LIST","ProjectStatusCode","assert","property","constantFrom","code","value","from","toBeInstanceOf","toEqual","string","filter","val","includes","toThrow","value1","value2","equals","toBe","record","code1","code2"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SACEC,wBAAwB,EAExBC,iBAAiB,QACZ,yBAAsB;AAE7BJ,SAAS,qBAAqB;IAC5BE,GAAG,uDAAuD;QACxDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,YAAY,IAAIJ,2BAA2B,CAACK;YACzD,MAAMC,QAAQL,kBAAkBM,IAAI,CAACF;YACrCP,OAAOQ,OAAOE,cAAc,CAACP;YAC7BH,OAAOQ,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAEJ;IACAN,GAAG,+CAA+C;QAChDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGc,MAAM,GACNC,MAAM,CACL,CAACC,MACC,CAACZ,yBAAyBa,QAAQ,CAChCD,OAGR,CAACP;YACCP,OAAO,IAAMG,kBAAkBM,IAAI,CAACF,OAAOS,OAAO,CAChD;QAEJ;IAGN;IAEAjB,SAAS,UAAU;QACjBE,GAAG,wEAAwE;YACzEH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,YAAY,IAAIJ,2BAA2B,CAACK;gBACzD,MAAMU,SAASd,kBAAkBM,IAAI,CAACF;gBACtC,MAAMW,SAASf,kBAAkBM,IAAI,CAACF;gBACtCP,OAAOiB,QAAQP,cAAc,CAACP;gBAC9BH,OAAOkB,QAAQR,cAAc,CAACP;gBAC9BH,OAAOiB,OAAOT,KAAK,EAAEG,OAAO,CAACJ;gBAC7BP,OAAOkB,OAAOV,KAAK,EAAEG,OAAO,CAACJ;gBAC7BP,OAAOiB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAEJ;QACAnB,GAAG,8EAA8E;YAC/EH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGuB,MAAM,CAAC;gBACNC,OAAOxB,GAAGQ,YAAY,IAAIJ;gBAC1BqB,OAAOzB,GAAGQ,YAAY,IAAIJ;YAC5B,GACCW,MAAM,CAAC,CAAC,EAAES,KAAK,EAAEC,KAAK,EAAE,GAAKD,UAAUC,QAC1C,CAAC,EAAED,KAAK,EAAEC,KAAK,EAAE;gBACf,MAAMN,SAASd,kBAAkBM,IAAI,CAACa;gBACtC,MAAMJ,SAASf,kBAAkBM,IAAI,CAACc;gBACtCvB,OAAOiB,QAAQP,cAAc,CAACP;gBAC9BH,OAAOkB,QAAQR,cAAc,CAACP;gBAC9BH,OAAOiB,OAAOT,KAAK,EAAEG,OAAO,CAACW;gBAC7BtB,OAAOkB,OAAOV,KAAK,EAAEG,OAAO,CAACY;gBAC7BvB,OAAOiB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}