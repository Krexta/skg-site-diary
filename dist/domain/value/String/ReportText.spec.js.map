{"version":3,"sources":["../../../../src/domain/value/String/ReportText.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { ReportText } from './ReportText';\n\ndescribe('ReportText', () => {\n  it('should return ReportText when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(\n          fc\n            .string({ minLength: 1 })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n        ),\n        (reportText) => {\n          const value = ReportText.from(reportText);\n          expect(value).toBeInstanceOf(ReportText);\n          expect(value.value).toEqual(reportText);\n        },\n      ),\n    );\n  });\n  it('should throw an error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (reportText) => {\n        expect(() => ReportText.from(reportText)).toThrow(\n          'ReportText must be not empty',\n        );\n      }),\n    );\n  });\n  describe('equals', () => {\n    it('should return true when compare two ReportText has same value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1 })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          (reportText) => {\n            const value1 = ReportText.from(reportText);\n            const value2 = ReportText.from(reportText);\n            expect(value1).toBeInstanceOf(ReportText);\n            expect(value2).toBeInstanceOf(ReportText);\n            expect(value1.value).toEqual(reportText);\n            expect(value2.value).toEqual(reportText);\n            expect(value1.equals(value2)).toBe(true);\n          },\n        ),\n      );\n    });\n    it('should return true when compare two ReportText has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              reportText1: fc\n                .string({ minLength: 1 })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n              reportText2: fc\n                .string({ minLength: 1 })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n            })\n            .filter(\n              ({ reportText1, reportText2 }) => reportText1 !== reportText2,\n            ),\n          ({ reportText1, reportText2 }) => {\n            const value1 = ReportText.from(reportText1);\n            const value2 = ReportText.from(reportText2);\n            expect(value1).toBeInstanceOf(ReportText);\n            expect(value2).toBeInstanceOf(ReportText);\n            expect(value1.value).toEqual(reportText1);\n            expect(value2.value).toEqual(reportText2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","ReportText","assert","property","option","string","minLength","map","val","trim","filter","length","reportText","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","value1","value2","equals","toBe","record","reportText1","reportText2"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,UAAU,QAAQ,kBAAe;AAE1CH,SAAS,cAAc;IACrBE,GAAG,gDAAgD;QACjDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CACPP,GACGQ,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,KAEnC,CAACC;YACC,MAAMC,QAAQZ,WAAWa,IAAI,CAACF;YAC9Bb,OAAOc,OAAOE,cAAc,CAACd;YAC7BF,OAAOc,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAGN;IACAZ,GAAG,6CAA6C;QAC9CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGoB,YAAY,CAAC,IAAI,KAAK,OAAO,CAACL;YAC3Cb,OAAO,IAAME,WAAWa,IAAI,CAACF,aAAaM,OAAO,CAC/C;QAEJ;IAEJ;IACApB,SAAS,UAAU;QACjBE,GAAG,iEAAiE;YAClEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGQ,MAAM,CAAC;gBAAEC,WAAW;YAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,IACjC,CAACC;gBACC,MAAMO,SAASlB,WAAWa,IAAI,CAACF;gBAC/B,MAAMQ,SAASnB,WAAWa,IAAI,CAACF;gBAC/Bb,OAAOoB,QAAQJ,cAAc,CAACd;gBAC9BF,OAAOqB,QAAQL,cAAc,CAACd;gBAC9BF,OAAOoB,OAAON,KAAK,EAAEG,OAAO,CAACJ;gBAC7Bb,OAAOqB,OAAOP,KAAK,EAAEG,OAAO,CAACJ;gBAC7Bb,OAAOoB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;QACAtB,GAAG,uEAAuE;YACxEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACG0B,MAAM,CAAC;gBACNC,aAAa3B,GACVQ,MAAM,CAAC;oBAAEC,WAAW;gBAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;gBACjCc,aAAa5B,GACVQ,MAAM,CAAC;oBAAEC,WAAW;gBAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;YACnC,GACCD,MAAM,CACL,CAAC,EAAEc,WAAW,EAAEC,WAAW,EAAE,GAAKD,gBAAgBC,cAEtD,CAAC,EAAED,WAAW,EAAEC,WAAW,EAAE;gBAC3B,MAAMN,SAASlB,WAAWa,IAAI,CAACU;gBAC/B,MAAMJ,SAASnB,WAAWa,IAAI,CAACW;gBAC/B1B,OAAOoB,QAAQJ,cAAc,CAACd;gBAC9BF,OAAOqB,QAAQL,cAAc,CAACd;gBAC9BF,OAAOoB,OAAON,KAAK,EAAEG,OAAO,CAACQ;gBAC7BzB,OAAOqB,OAAOP,KAAK,EAAEG,OAAO,CAACS;gBAC7B1B,OAAOoB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}