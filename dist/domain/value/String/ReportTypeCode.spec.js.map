{"version":3,"sources":["../../../../src/domain/value/String/ReportTypeCode.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { MAX_REPORT_TYPE_CODE_LENGTH } from './BaseString';\nimport { ReportTypeCode } from './ReportTypeCode';\n\ndescribe('ReportTypeCode', () => {\n  it('should return ReportTypeCode when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(\n          fc\n            .string({ minLength: 1, maxLength: MAX_REPORT_TYPE_CODE_LENGTH })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n        ),\n        (code) => {\n          const value = ReportTypeCode.from(code);\n          expect(value).toBeInstanceOf(ReportTypeCode);\n          expect(value.value).toEqual(code);\n        },\n      ),\n    );\n  });\n  it('should throw an error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (code) => {\n        expect(() => ReportTypeCode.from(code)).toThrow(\n          'ReportTypeCode must be not empty',\n        );\n      }),\n    );\n  });\n  it('should throw an error when input is too long', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string({ minLength: MAX_REPORT_TYPE_CODE_LENGTH + 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length > MAX_REPORT_TYPE_CODE_LENGTH),\n        (code) => {\n          expect(() => ReportTypeCode.from(code)).toThrow(\n            `ReportTypeCode has maximum length of ${MAX_REPORT_TYPE_CODE_LENGTH}`,\n          );\n        },\n      ),\n    );\n  });\n  describe('equals', () => {\n    it('should return true when compare two ReportTypeCode has same value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1, maxLength: MAX_REPORT_TYPE_CODE_LENGTH })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          (code) => {\n            const value1 = ReportTypeCode.from(code);\n            const value2 = ReportTypeCode.from(code);\n            expect(value1).toBeInstanceOf(ReportTypeCode);\n            expect(value2).toBeInstanceOf(ReportTypeCode);\n            expect(value1.value).toEqual(code);\n            expect(value2.value).toEqual(code);\n            expect(value1.equals(value2)).toBe(true);\n          },\n        ),\n      );\n    });\n    it('should return true when compare two ReportTypeCode has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              code1: fc\n                .string({\n                  minLength: 1,\n                  maxLength: MAX_REPORT_TYPE_CODE_LENGTH,\n                })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n              code2: fc\n                .string({\n                  minLength: 1,\n                  maxLength: MAX_REPORT_TYPE_CODE_LENGTH,\n                })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n            })\n            .filter(({ code1, code2 }) => code1 !== code2),\n          ({ code1, code2 }) => {\n            const value1 = ReportTypeCode.from(code1);\n            const value2 = ReportTypeCode.from(code2);\n            expect(value1).toBeInstanceOf(ReportTypeCode);\n            expect(value2).toBeInstanceOf(ReportTypeCode);\n            expect(value1.value).toEqual(code1);\n            expect(value2.value).toEqual(code2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","MAX_REPORT_TYPE_CODE_LENGTH","ReportTypeCode","assert","property","option","string","minLength","maxLength","map","val","trim","filter","length","code","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","value1","value2","equals","toBe","record","code1","code2"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,2BAA2B,QAAQ,kBAAe;AAC3D,SAASC,cAAc,QAAQ,sBAAmB;AAElDJ,SAAS,kBAAkB;IACzBE,GAAG,oDAAoD;QACrDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GAAGQ,MAAM,CACPR,GACGS,MAAM,CAAC;YAAEC,WAAW;YAAGC,WAAWP;QAA4B,GAC9DQ,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,KAEnC,CAACC;YACC,MAAMC,QAAQb,eAAec,IAAI,CAACF;YAClCf,OAAOgB,OAAOE,cAAc,CAACf;YAC7BH,OAAOgB,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAGN;IACAd,GAAG,6CAA6C;QAC9CH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGsB,YAAY,CAAC,IAAI,KAAK,OAAO,CAACL;YAC3Cf,OAAO,IAAMG,eAAec,IAAI,CAACF,OAAOM,OAAO,CAC7C;QAEJ;IAEJ;IACApB,GAAG,gDAAgD;QACjDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGS,MAAM,CAAC;YAAEC,WAAWN,8BAA8B;QAAE,GACpDQ,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,GAAGZ,8BAChC,CAACa;YACCf,OAAO,IAAMG,eAAec,IAAI,CAACF,OAAOM,OAAO,CAC7C,CAAC,qCAAqC,EAAEnB,6BAA6B;QAEzE;IAGN;IACAH,SAAS,UAAU;QACjBE,GAAG,qEAAqE;YACtEH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGS,MAAM,CAAC;gBAAEC,WAAW;gBAAGC,WAAWP;YAA4B,GAC9DQ,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,IACjC,CAACC;gBACC,MAAMO,SAASnB,eAAec,IAAI,CAACF;gBACnC,MAAMQ,SAASpB,eAAec,IAAI,CAACF;gBACnCf,OAAOsB,QAAQJ,cAAc,CAACf;gBAC9BH,OAAOuB,QAAQL,cAAc,CAACf;gBAC9BH,OAAOsB,OAAON,KAAK,EAAEG,OAAO,CAACJ;gBAC7Bf,OAAOuB,OAAOP,KAAK,EAAEG,OAAO,CAACJ;gBAC7Bf,OAAOsB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;QACAxB,GAAG,2EAA2E;YAC5EH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACG4B,MAAM,CAAC;gBACNC,OAAO7B,GACJS,MAAM,CAAC;oBACNC,WAAW;oBACXC,WAAWP;gBACb,GACCQ,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;gBACjCc,OAAO9B,GACJS,MAAM,CAAC;oBACNC,WAAW;oBACXC,WAAWP;gBACb,GACCQ,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;YACnC,GACCD,MAAM,CAAC,CAAC,EAAEc,KAAK,EAAEC,KAAK,EAAE,GAAKD,UAAUC,QAC1C,CAAC,EAAED,KAAK,EAAEC,KAAK,EAAE;gBACf,MAAMN,SAASnB,eAAec,IAAI,CAACU;gBACnC,MAAMJ,SAASpB,eAAec,IAAI,CAACW;gBACnC5B,OAAOsB,QAAQJ,cAAc,CAACf;gBAC9BH,OAAOuB,QAAQL,cAAc,CAACf;gBAC9BH,OAAOsB,OAAON,KAAK,EAAEG,OAAO,CAACQ;gBAC7B3B,OAAOuB,OAAOP,KAAK,EAAEG,OAAO,CAACS;gBAC7B5B,OAAOsB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}