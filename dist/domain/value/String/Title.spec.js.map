{"version":3,"sources":["../../../../src/domain/value/String/Title.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { Title } from './Title';\n\ndescribe('Title', () => {\n  it('should return Title when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc.option(\n          fc\n            .string({ minLength: 1 })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n        ),\n        (title) => {\n          const value = Title.from(title);\n          expect(value).toBeInstanceOf(Title);\n          expect(value.value).toEqual(title);\n        },\n      ),\n    );\n  });\n  it('should throw an error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (title) => {\n        expect(() => Title.from(title)).toThrow('Title must be not empty');\n      }),\n    );\n  });\n\n  describe('equals', () => {\n    it('should return true when compare two Title has same value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1 })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          (title) => {\n            const value1 = Title.from(title);\n            const value2 = Title.from(title);\n            expect(value1).toBeInstanceOf(Title);\n            expect(value2).toBeInstanceOf(Title);\n            expect(value1.value).toEqual(title);\n            expect(value2.value).toEqual(title);\n            expect(value1.equals(value2)).toBe(true);\n          },\n        ),\n      );\n    });\n    it('should return true when compare two Title has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              title1: fc\n                .string({ minLength: 1 })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n              title2: fc\n                .string({ minLength: 1 })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n            })\n            .filter(({ title1, title2 }) => title1 !== title2),\n          ({ title1, title2 }) => {\n            const value1 = Title.from(title1);\n            const value2 = Title.from(title2);\n            expect(value1).toBeInstanceOf(Title);\n            expect(value2).toBeInstanceOf(Title);\n            expect(value1.value).toEqual(title1);\n            expect(value2.value).toEqual(title2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","Title","assert","property","option","string","minLength","map","val","trim","filter","length","title","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","value1","value2","equals","toBe","record","title1","title2"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,KAAK,QAAQ,aAAU;AAEhCH,SAAS,SAAS;IAChBE,GAAG,2CAA2C;QAC5CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GAAGO,MAAM,CACPP,GACGQ,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,KAEnC,CAACC;YACC,MAAMC,QAAQZ,MAAMa,IAAI,CAACF;YACzBb,OAAOc,OAAOE,cAAc,CAACd;YAC7BF,OAAOc,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAGN;IACAZ,GAAG,6CAA6C;QAC9CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGoB,YAAY,CAAC,IAAI,KAAK,OAAO,CAACL;YAC3Cb,OAAO,IAAME,MAAMa,IAAI,CAACF,QAAQM,OAAO,CAAC;QAC1C;IAEJ;IAEApB,SAAS,UAAU;QACjBE,GAAG,4DAA4D;YAC7DH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGQ,MAAM,CAAC;gBAAEC,WAAW;YAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI,IACjC,CAACC;gBACC,MAAMO,SAASlB,MAAMa,IAAI,CAACF;gBAC1B,MAAMQ,SAASnB,MAAMa,IAAI,CAACF;gBAC1Bb,OAAOoB,QAAQJ,cAAc,CAACd;gBAC9BF,OAAOqB,QAAQL,cAAc,CAACd;gBAC9BF,OAAOoB,OAAON,KAAK,EAAEG,OAAO,CAACJ;gBAC7Bb,OAAOqB,OAAOP,KAAK,EAAEG,OAAO,CAACJ;gBAC7Bb,OAAOoB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;QACAtB,GAAG,kEAAkE;YACnEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACG0B,MAAM,CAAC;gBACNC,QAAQ3B,GACLQ,MAAM,CAAC;oBAAEC,WAAW;gBAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;gBACjCc,QAAQ5B,GACLQ,MAAM,CAAC;oBAAEC,WAAW;gBAAE,GACtBC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,IAAI;YACnC,GACCD,MAAM,CAAC,CAAC,EAAEc,MAAM,EAAEC,MAAM,EAAE,GAAKD,WAAWC,SAC7C,CAAC,EAAED,MAAM,EAAEC,MAAM,EAAE;gBACjB,MAAMN,SAASlB,MAAMa,IAAI,CAACU;gBAC1B,MAAMJ,SAASnB,MAAMa,IAAI,CAACW;gBAC1B1B,OAAOoB,QAAQJ,cAAc,CAACd;gBAC9BF,OAAOqB,QAAQL,cAAc,CAACd;gBAC9BF,OAAOoB,OAAON,KAAK,EAAEG,OAAO,CAACQ;gBAC7BzB,OAAOqB,OAAOP,KAAK,EAAEG,OAAO,CAACS;gBAC7B1B,OAAOoB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}