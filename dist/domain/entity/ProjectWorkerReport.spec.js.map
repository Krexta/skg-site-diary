{"version":3,"sources":["../../../src/domain/entity/ProjectWorkerReport.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  CreateUserId,\n  FileName,\n  FilePath,\n  ProjectId,\n  ProjectReportId,\n  ReportText,\n  ReportTypeCode,\n  Title,\n  UploadUserId,\n  WorkerId,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../value';\nimport {\n  MAX_FILE_NAME_LENGTH,\n  MAX_REPORT_TYPE_CODE_LENGTH,\n} from '../value/String/BaseString';\n\nimport {\n  File,\n  IProjectWorkerReport,\n  IUpdateProjectWorkerReport,\n  ProjectWorkerReport,\n  UpdateProjectWorkerReport,\n} from '.';\n\nfunction makeCreateProperty() {\n  return fc\n    .record({\n      id: fc.uuid({ version: 7 }),\n      createUserId: fc.uuid({ version: 7 }),\n      reportDate: fc\n        .date({\n          min: new Date(0, 0, 0, 0, 0, 0),\n          max: new Date(9998, 12, 31, 23, 59, 59),\n        })\n        .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n      projectId: fc.uuid({ version: 7 }),\n      files: fc.array(\n        fc.record({\n          name: fc\n            .string({ minLength: 1, maxLength: MAX_FILE_NAME_LENGTH })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          path: fc.webUrl(),\n          uploadUserId: fc.uuid({ version: 7 }),\n        }),\n        { minLength: 1 },\n      ),\n      title: fc\n        .string({ minLength: 1 })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      reportText: fc\n        .string({ minLength: 1 })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      reportTypeCode: fc\n        .string({ minLength: 1, maxLength: MAX_REPORT_TYPE_CODE_LENGTH })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      workerIds: fc.array(fc.uuid({ version: 7 }), { minLength: 1 }),\n    })\n    .map<IProjectWorkerReport>(\n      ({\n        id,\n        createUserId,\n        reportDate,\n        projectId,\n        files,\n        title,\n        reportText,\n        reportTypeCode,\n        workerIds,\n      }) => ({\n        id: ProjectReportId.from(id),\n        createUserId: CreateUserId.from(createUserId),\n        reportDate: YearMonthDay.from(reportDate),\n        projectId: ProjectId.from(projectId),\n        files: files.map(\n          (file) =>\n            new File({\n              name: FileName.from(file.name),\n              path: FilePath.from(file.path),\n              uploadUserId: UploadUserId.from(file.uploadUserId),\n            }),\n        ),\n        title: Title.from(title),\n        reportText: ReportText.from(reportText),\n        reportTypeCode: ReportTypeCode.from(reportTypeCode),\n        workerIds: workerIds.map((id) => WorkerId.from(id)),\n      }),\n    );\n}\nfunction makeUpdateProperty() {\n  return fc\n    .record({\n      createUserId: fc.option(fc.uuid({ version: 7 }), { nil: undefined }),\n      reportDate: fc.option(\n        fc\n          .date({\n            min: new Date(0, 0, 0, 0, 0, 0),\n            max: new Date(9998, 12, 31, 23, 59, 59),\n          })\n          .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n        { nil: undefined },\n      ),\n      projectId: fc.option(fc.uuid({ version: 7 }), { nil: undefined }),\n      files: fc.option(\n        fc.array(\n          fc.record({\n            name: fc\n              .string({ minLength: 1, maxLength: MAX_FILE_NAME_LENGTH })\n              .map((val) => val.trim())\n              .filter((val) => val.length >= 1),\n            path: fc.webUrl(),\n            uploadUserId: fc.uuid({ version: 7 }),\n          }),\n          { minLength: 1 },\n        ),\n        { nil: undefined },\n      ),\n      title: fc.option(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      reportText: fc.option(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      reportTypeCode: fc.option(\n        fc\n          .string({ minLength: 1, maxLength: MAX_REPORT_TYPE_CODE_LENGTH })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      workerIds: fc.option(\n        fc.array(fc.uuid({ version: 7 }), { minLength: 1 }),\n        { nil: undefined },\n      ),\n    })\n    .map<IUpdateProjectWorkerReport>(\n      ({\n        createUserId,\n        reportDate,\n        projectId,\n        files,\n        title,\n        reportText,\n        reportTypeCode,\n        workerIds,\n      }) => ({\n        createUserId: createUserId\n          ? CreateUserId.from(createUserId)\n          : undefined,\n        reportDate: reportDate ? YearMonthDay.from(reportDate) : undefined,\n        projectId: projectId ? ProjectId.from(projectId) : undefined,\n        files: files?.map(\n          (file) =>\n            new File({\n              name: FileName.from(file.name),\n              path: FilePath.from(file.path),\n              uploadUserId: UploadUserId.from(file.uploadUserId),\n            }),\n        ),\n        title: title ? Title.from(title) : undefined,\n        reportText: reportText ? ReportText.from(reportText) : undefined,\n        reportTypeCode: reportTypeCode\n          ? ReportTypeCode.from(reportTypeCode)\n          : undefined,\n        workerIds: workerIds?.map((id) => WorkerId.from(id)),\n      }),\n    );\n}\n\ndescribe('ProjectWorkerReport', () => {\n  it('should return ProjectWorkerReport when input is valid', () => {\n    fc.assert(\n      fc.property(makeCreateProperty(), (args) => {\n        const entity = new ProjectWorkerReport(args);\n        expect(entity).toBeInstanceOf(ProjectWorkerReport);\n\n        expect(entity.id.value).toEqual(args.id.value);\n        expect(entity.createUserId.value).toEqual(args.createUserId.value);\n        expect(entity.reportDate.toString()).toEqual(\n          args.reportDate.toString(),\n        );\n        expect(entity.projectId.value).toEqual(args.projectId.value);\n        expect(entity.files).toEqual(expect.arrayContaining(args.files));\n        expect(entity.title.value).toEqual(args.title.value);\n        expect(entity.reportText.value).toEqual(args.reportText.value);\n        expect(entity.reportTypeCode.value).toEqual(args.reportTypeCode.value);\n        expect(entity.workerIds.map((id) => id.value)).toEqual(\n          args.workerIds.map((id) => id.value),\n        );\n      }),\n    );\n  });\n  describe('update', () => {\n    it('should return UpdateProjectWorkerReport when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.record({\n            createArgs: makeCreateProperty(),\n            updateArgs: makeUpdateProperty(),\n          }),\n          ({ createArgs, updateArgs }) => {\n            const entity = new ProjectWorkerReport(createArgs);\n            expect(entity).toBeInstanceOf(ProjectWorkerReport);\n\n            const update = entity.update(updateArgs);\n            expect(update).toBeInstanceOf(UpdateProjectWorkerReport);\n            expect(update.id.value).toEqual(entity.id.value);\n            expect(update.createUserId?.value).toEqual(\n              updateArgs.createUserId?.value,\n            );\n            expect(update.reportDate?.toString()).toEqual(\n              updateArgs.reportDate?.toString(),\n            );\n            if (updateArgs.files) {\n              expect(update.files).toEqual(\n                expect.arrayContaining(updateArgs.files),\n              );\n            } else {\n              expect(update.files).toBeUndefined();\n            }\n            expect(update.title?.value).toEqual(updateArgs.title?.value);\n            expect(update.reportText?.value).toEqual(\n              updateArgs.reportText?.value,\n            );\n            expect(update.reportText?.value).toEqual(\n              updateArgs.reportText?.value,\n            );\n            expect(update.reportTypeCode?.value).toEqual(\n              updateArgs.reportTypeCode?.value,\n            );\n            if (updateArgs.workerIds) {\n              expect(update.workerIds).toEqual(\n                expect.arrayContaining(updateArgs.workerIds),\n              );\n            } else {\n              expect(update.workerIds).toBeUndefined();\n            }\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["format","fc","describe","expect","it","CreateUserId","FileName","FilePath","ProjectId","ProjectReportId","ReportText","ReportTypeCode","Title","UploadUserId","WorkerId","YEAR_MONTH_DAY_FORMAT","YearMonthDay","MAX_FILE_NAME_LENGTH","MAX_REPORT_TYPE_CODE_LENGTH","File","ProjectWorkerReport","UpdateProjectWorkerReport","makeCreateProperty","record","id","uuid","version","createUserId","reportDate","date","min","Date","max","map","val","projectId","files","array","name","string","minLength","maxLength","trim","filter","length","path","webUrl","uploadUserId","title","reportText","reportTypeCode","workerIds","from","file","makeUpdateProperty","option","nil","undefined","assert","property","args","entity","toBeInstanceOf","value","toEqual","toString","arrayContaining","createArgs","updateArgs","update","toBeUndefined"],"mappings":"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"}