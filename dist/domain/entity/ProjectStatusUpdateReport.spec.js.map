{"version":3,"sources":["../../../src/domain/entity/ProjectStatusUpdateReport.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  CreateUserId,\n  FileName,\n  FilePath,\n  PROJECT_STATUS_CODE_LIST,\n  ProjectId,\n  ProjectReportId,\n  ProjectStatusCode,\n  ReportText,\n  Title,\n  UploadUserId,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../value';\nimport { MAX_FILE_NAME_LENGTH } from '../value/String/BaseString';\n\nimport {\n  File,\n  IProjectStatusUpdateReport,\n  IUpdateProjectStatusUpdateReport,\n  ProjectStatusUpdateReport,\n  UpdateProjectStatusUpdateReport,\n} from '.';\n\nfunction makeCreateProperty() {\n  return fc\n    .record({\n      id: fc.uuid({ version: 7 }),\n      createUserId: fc.uuid({ version: 7 }),\n      reportDate: fc\n        .date({\n          min: new Date(0, 0, 0, 0, 0, 0),\n          max: new Date(9998, 12, 31, 23, 59, 59),\n        })\n        .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n      projectId: fc.uuid({ version: 7 }),\n      files: fc.array(\n        fc.record({\n          name: fc\n            .string({ minLength: 1, maxLength: MAX_FILE_NAME_LENGTH })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          path: fc.webUrl(),\n          uploadUserId: fc.uuid({ version: 7 }),\n        }),\n        { minLength: 1 },\n      ),\n      title: fc\n        .string({ minLength: 1 })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      reportText: fc\n        .string({ minLength: 1 })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      projectStatusCode: fc.constantFrom(...PROJECT_STATUS_CODE_LIST),\n    })\n    .map<IProjectStatusUpdateReport>(\n      ({\n        id,\n        createUserId,\n        reportDate,\n        projectId,\n        files,\n        title,\n        reportText,\n        projectStatusCode,\n      }) => ({\n        id: ProjectReportId.from(id),\n        createUserId: CreateUserId.from(createUserId),\n        reportDate: YearMonthDay.from(reportDate),\n        projectId: ProjectId.from(projectId),\n        files: files.map(\n          (file) =>\n            new File({\n              name: FileName.from(file.name),\n              path: FilePath.from(file.path),\n              uploadUserId: UploadUserId.from(file.uploadUserId),\n            }),\n        ),\n        title: Title.from(title),\n        reportText: ReportText.from(reportText),\n        projectStatusCode: ProjectStatusCode.from(projectStatusCode),\n      }),\n    );\n}\nfunction makeUpdateProperty() {\n  return fc\n    .record({\n      createUserId: fc.option(fc.uuid({ version: 7 }), { nil: undefined }),\n      reportDate: fc.option(\n        fc\n          .date({\n            min: new Date(0, 0, 0, 0, 0, 0),\n            max: new Date(9998, 12, 31, 23, 59, 59),\n          })\n          .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n        { nil: undefined },\n      ),\n      projectId: fc.option(fc.uuid({ version: 7 }), { nil: undefined }),\n      files: fc.option(\n        fc.array(\n          fc.record({\n            name: fc\n              .string({ minLength: 1, maxLength: MAX_FILE_NAME_LENGTH })\n              .map((val) => val.trim())\n              .filter((val) => val.length >= 1),\n            path: fc.webUrl(),\n            uploadUserId: fc.uuid({ version: 7 }),\n          }),\n          { minLength: 1 },\n        ),\n        { nil: undefined },\n      ),\n      title: fc.option(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      reportText: fc.option(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      projectStatusCode: fc.option(\n        fc.constantFrom(...PROJECT_STATUS_CODE_LIST),\n        { nil: undefined },\n      ),\n    })\n    .map<IUpdateProjectStatusUpdateReport>(\n      ({\n        createUserId,\n        reportDate,\n        projectId,\n        files,\n        title,\n        reportText,\n        projectStatusCode,\n      }) => ({\n        createUserId: createUserId\n          ? CreateUserId.from(createUserId)\n          : undefined,\n        reportDate: reportDate ? YearMonthDay.from(reportDate) : undefined,\n        projectId: projectId ? ProjectId.from(projectId) : undefined,\n        files: files?.map(\n          (file) =>\n            new File({\n              name: FileName.from(file.name),\n              path: FilePath.from(file.path),\n              uploadUserId: UploadUserId.from(file.uploadUserId),\n            }),\n        ),\n        title: title ? Title.from(title) : undefined,\n        reportText: reportText ? ReportText.from(reportText) : undefined,\n        projectStatusCode: projectStatusCode\n          ? ProjectStatusCode.from(projectStatusCode)\n          : undefined,\n      }),\n    );\n}\n\ndescribe('ProjectStatusUpdateReport', () => {\n  it('should return ProjectStatusUpdateReport when input is valid', () => {\n    fc.assert(\n      fc.property(makeCreateProperty(), (args) => {\n        const entity = new ProjectStatusUpdateReport(args);\n        expect(entity).toBeInstanceOf(ProjectStatusUpdateReport);\n\n        expect(entity.id.value).toEqual(args.id.value);\n        expect(entity.createUserId.value).toEqual(args.createUserId.value);\n        expect(entity.reportDate.toString()).toEqual(\n          args.reportDate.toString(),\n        );\n        expect(entity.projectId.value).toEqual(args.projectId.value);\n        expect(entity.files).toEqual(expect.arrayContaining(args.files));\n        expect(entity.title.value).toEqual(args.title.value);\n        expect(entity.reportText.value).toEqual(args.reportText.value);\n        expect(entity.projectStatusCode.value).toEqual(\n          args.projectStatusCode.value,\n        );\n      }),\n    );\n  });\n  describe('update', () => {\n    it('should return UpdateProjectStatusUpdateReport when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.record({\n            createArgs: makeCreateProperty(),\n            updateArgs: makeUpdateProperty(),\n          }),\n          ({ createArgs, updateArgs }) => {\n            const entity = new ProjectStatusUpdateReport(createArgs);\n            expect(entity).toBeInstanceOf(ProjectStatusUpdateReport);\n\n            const update = entity.update(updateArgs);\n            expect(update).toBeInstanceOf(UpdateProjectStatusUpdateReport);\n            expect(update.id.value).toEqual(entity.id.value);\n            expect(update.createUserId?.value).toEqual(\n              updateArgs.createUserId?.value,\n            );\n            expect(update.reportDate?.toString()).toEqual(\n              updateArgs.reportDate?.toString(),\n            );\n            if (updateArgs.files) {\n              expect(update.files).toEqual(\n                expect.arrayContaining(updateArgs.files),\n              );\n            } else {\n              expect(update.files).toBeUndefined();\n            }\n            expect(update.title?.value).toEqual(updateArgs.title?.value);\n            expect(update.reportText?.value).toEqual(\n              updateArgs.reportText?.value,\n            );\n            expect(update.projectStatusCode?.value).toEqual(\n              updateArgs.projectStatusCode?.value,\n            );\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["format","fc","describe","expect","it","CreateUserId","FileName","FilePath","PROJECT_STATUS_CODE_LIST","ProjectId","ProjectReportId","ProjectStatusCode","ReportText","Title","UploadUserId","YEAR_MONTH_DAY_FORMAT","YearMonthDay","MAX_FILE_NAME_LENGTH","File","ProjectStatusUpdateReport","UpdateProjectStatusUpdateReport","makeCreateProperty","record","id","uuid","version","createUserId","reportDate","date","min","Date","max","map","val","projectId","files","array","name","string","minLength","maxLength","trim","filter","length","path","webUrl","uploadUserId","title","reportText","projectStatusCode","constantFrom","from","file","makeUpdateProperty","option","nil","undefined","assert","property","args","entity","toBeInstanceOf","value","toEqual","toString","arrayContaining","createArgs","updateArgs","update","toBeUndefined"],"mappings":"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"}