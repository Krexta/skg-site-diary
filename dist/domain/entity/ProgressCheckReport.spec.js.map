{"version":3,"sources":["../../../src/domain/entity/ProgressCheckReport.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  ConsumedWorkersPercentage,\n  CreateUserId,\n  ExecutionBudgetUnitId,\n  FileName,\n  FilePath,\n  ProgressReportData,\n  ProjectId,\n  ProjectReportId,\n  ReportText,\n  Title,\n  TotalPerformancePercentage,\n  UploadUserId,\n  WorkerId,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../value';\nimport { MAX_FILE_NAME_LENGTH } from '../value/String/BaseString';\n\nimport { File, ProgressCheckReport, UpdateProgressCheckReport } from '.';\n\nfunction makeCreateProperty() {\n  return fc\n    .record({\n      id: fc.uuid({ version: 7 }),\n      createUserId: fc.uuid({ version: 7 }),\n      reportDate: fc\n        .date({\n          min: new Date(0, 0, 0, 0, 0, 0),\n          max: new Date(9998, 12, 31, 23, 59, 59),\n        })\n        .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n      projectId: fc.uuid({ version: 7 }),\n      files: fc.array(\n        fc.record({\n          name: fc\n            .string({ minLength: 1, maxLength: MAX_FILE_NAME_LENGTH })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          path: fc.webUrl(),\n          uploadUserId: fc.uuid({ version: 7 }),\n        }),\n        { minLength: 1 },\n      ),\n      title: fc\n        .string({ minLength: 1 })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      reportText: fc\n        .string({ minLength: 1 })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      executionBudgetUnitId: fc.uuid({ version: 7 }),\n      progressReportData: fc.object({\n        key: fc\n          .string({ maxLength: 20 })\n          .filter(\n            (val) =>\n              ![\n                'constructor',\n                'toString',\n                'hasOwnProperty',\n                'valueOf',\n                'isPrototypeOf',\n                'propertyIsEnumerable',\n                '__proto__',\n              ].includes(val),\n          ),\n        values: [fc.string({ maxLength: 256 })],\n        maxDepth: 2,\n        maxKeys: 5,\n      }),\n      totalPerformancePercentage: fc.stringMatching(/^[0-9]{1,2}(\\.[0-9])?$/),\n      consumedWorkersPercentage: fc.stringMatching(/^[0-9](\\.[0-9]{1,2})?$/),\n      workerIds: fc.array(fc.uuid({ version: 7 }), { minLength: 1 }),\n    })\n    .map(\n      ({\n        id,\n        createUserId,\n        reportDate,\n        projectId,\n        files,\n        title,\n        reportText,\n        executionBudgetUnitId,\n        progressReportData,\n        totalPerformancePercentage,\n        consumedWorkersPercentage,\n        workerIds,\n      }) => ({\n        id: ProjectReportId.from(id),\n        createUserId: CreateUserId.from(createUserId),\n        reportDate: YearMonthDay.from(reportDate),\n        projectId: ProjectId.from(projectId),\n        files: files.map(\n          (file) =>\n            new File({\n              name: FileName.from(file.name),\n              path: FilePath.from(file.path),\n              uploadUserId: UploadUserId.from(file.uploadUserId),\n            }),\n        ),\n        title: Title.from(title),\n        reportText: ReportText.from(reportText),\n        executionBudgetUnitId: ExecutionBudgetUnitId.from(\n          executionBudgetUnitId,\n        ),\n        progressReportData: ProgressReportData.from(progressReportData),\n        totalPerformancePercentage: TotalPerformancePercentage.from(\n          totalPerformancePercentage,\n        ),\n        consumedWorkersPercentage: ConsumedWorkersPercentage.from(\n          consumedWorkersPercentage,\n        ),\n        workerIds: workerIds.map((id) => WorkerId.from(id)),\n      }),\n    );\n}\nfunction makeUpdateProperty() {\n  return fc\n    .record({\n      createUserId: fc.option(fc.uuid({ version: 7 }), { nil: undefined }),\n      reportDate: fc.option(\n        fc\n          .date({\n            min: new Date(0, 0, 0, 0, 0, 0),\n            max: new Date(9998, 12, 31, 23, 59, 59),\n          })\n          .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n        { nil: undefined },\n      ),\n      projectId: fc.option(fc.uuid({ version: 7 }), { nil: undefined }),\n      files: fc.option(\n        fc.array(\n          fc.record({\n            name: fc\n              .string({ minLength: 1, maxLength: MAX_FILE_NAME_LENGTH })\n              .map((val) => val.trim())\n              .filter((val) => val.length >= 1),\n            path: fc.webUrl(),\n            uploadUserId: fc.uuid({ version: 7 }),\n          }),\n          { minLength: 1 },\n        ),\n        { nil: undefined },\n      ),\n      title: fc.option(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      reportText: fc.option(\n        fc\n          .string({ minLength: 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      executionBudgetUnitId: fc.option(fc.uuid({ version: 7 }), {\n        nil: undefined,\n      }),\n      progressReportData: fc.option(\n        fc.object({\n          key: fc\n            .string({ maxLength: 20 })\n            .filter(\n              (val) =>\n                ![\n                  'constructor',\n                  'toString',\n                  'hasOwnProperty',\n                  'valueOf',\n                  'isPrototypeOf',\n                  'propertyIsEnumerable',\n                  '__proto__',\n                ].includes(val),\n            ),\n          values: [fc.string({ maxLength: 256 })],\n          maxDepth: 2,\n          maxKeys: 5,\n        }),\n        { nil: undefined },\n      ),\n      totalPerformancePercentage: fc.option(\n        fc.stringMatching(/^[0-9]{1,2}(\\.[0-9])?$/),\n        { nil: undefined },\n      ),\n      consumedWorkersPercentage: fc.option(\n        fc.stringMatching(/^[0-9](\\.[0-9]{1,2})?$/),\n        { nil: undefined },\n      ),\n      workerIds: fc.option(\n        fc.array(fc.uuid({ version: 7 }), { minLength: 1 }),\n        { nil: undefined },\n      ),\n    })\n    .map(\n      ({\n        createUserId,\n        reportDate,\n        projectId,\n        files,\n        title,\n        reportText,\n        executionBudgetUnitId,\n        progressReportData,\n        totalPerformancePercentage,\n        consumedWorkersPercentage,\n        workerIds,\n      }) => ({\n        createUserId: createUserId\n          ? CreateUserId.from(createUserId)\n          : undefined,\n        reportDate: reportDate ? YearMonthDay.from(reportDate) : undefined,\n        projectId: projectId ? ProjectId.from(projectId) : undefined,\n        files: files?.map(\n          (file) =>\n            new File({\n              name: FileName.from(file.name),\n              path: FilePath.from(file.path),\n              uploadUserId: UploadUserId.from(file.uploadUserId),\n            }),\n        ),\n        title: title ? Title.from(title) : undefined,\n        reportText: reportText ? ReportText.from(reportText) : undefined,\n        executionBudgetUnitId: executionBudgetUnitId\n          ? ExecutionBudgetUnitId.from(executionBudgetUnitId)\n          : undefined,\n        progressReportData: progressReportData\n          ? ProgressReportData.from(progressReportData)\n          : undefined,\n        totalPerformancePercentage: totalPerformancePercentage\n          ? TotalPerformancePercentage.from(totalPerformancePercentage)\n          : undefined,\n        consumedWorkersPercentage: consumedWorkersPercentage\n          ? ConsumedWorkersPercentage.from(consumedWorkersPercentage)\n          : undefined,\n        workerIds: workerIds?.map((id) => WorkerId.from(id)),\n      }),\n    );\n}\n\ndescribe('ProgressCheckReport', () => {\n  it('Should return ProgressCheckReport when input is valid', () => {\n    fc.assert(\n      fc.property(makeCreateProperty(), (args) => {\n        const entity = new ProgressCheckReport(args);\n        expect(entity).toBeInstanceOf(ProgressCheckReport);\n\n        expect(entity.id.value).toEqual(args.id.value);\n        expect(entity.createUserId.value).toEqual(args.createUserId.value);\n        expect(entity.reportDate.toString()).toEqual(\n          args.reportDate.toString(),\n        );\n        expect(entity.projectId.value).toEqual(args.projectId.value);\n        expect(entity.files).toEqual(expect.arrayContaining(args.files));\n        expect(entity.title.value).toEqual(args.title.value);\n        expect(entity.reportText.value).toEqual(args.reportText.value);\n        expect(entity.executionBudgetUnitId.value).toEqual(\n          args.executionBudgetUnitId.value,\n        );\n        expect(entity.progressReportData.value).toEqual(\n          args.progressReportData.value,\n        );\n        expect(entity.totalPerformancePercentage.value).toEqual(\n          args.totalPerformancePercentage.value,\n        );\n        expect(entity.consumedWorkersPercentage.value).toEqual(\n          args.consumedWorkersPercentage.value,\n        );\n        expect(entity.workerIds.map((id) => id.value)).toEqual(\n          args.workerIds.map((id) => id.value),\n        );\n      }),\n    );\n  });\n  describe('update', () => {\n    it('should return UpdateProgressCheckReport when input is valid', () => {\n      fc.assert(\n        fc.property(\n          fc.record({\n            createArgs: makeCreateProperty(),\n            updateArgs: makeUpdateProperty(),\n          }),\n          ({ createArgs, updateArgs }) => {\n            const entity = new ProgressCheckReport(createArgs);\n            expect(entity).toBeInstanceOf(ProgressCheckReport);\n\n            const update = entity.update(updateArgs);\n            expect(update).toBeInstanceOf(UpdateProgressCheckReport);\n            expect(update.id.value).toEqual(entity.id.value);\n            expect(update.createUserId?.value).toEqual(\n              updateArgs.createUserId?.value,\n            );\n            expect(update.reportDate?.toString()).toEqual(\n              updateArgs.reportDate?.toString(),\n            );\n            if (updateArgs.files) {\n              expect(update.files).toEqual(\n                expect.arrayContaining(updateArgs.files),\n              );\n            } else {\n              expect(update.files).toBeUndefined();\n            }\n            expect(update.title?.value).toEqual(updateArgs.title?.value);\n            expect(update.reportText?.value).toEqual(\n              updateArgs.reportText?.value,\n            );\n            expect(update.executionBudgetUnitId?.value).toEqual(\n              updateArgs.executionBudgetUnitId?.value,\n            );\n            expect(update.progressReportData?.value).toEqual(\n              updateArgs.progressReportData?.value,\n            );\n            expect(update.totalPerformancePercentage?.value).toEqual(\n              updateArgs.totalPerformancePercentage?.value,\n            );\n            expect(update.consumedWorkersPercentage?.value).toEqual(\n              updateArgs.consumedWorkersPercentage?.value,\n            );\n            if (updateArgs.workerIds) {\n              expect(update.workerIds).toEqual(\n                expect.arrayContaining(updateArgs.workerIds),\n              );\n            } else {\n              expect(update.workerIds).toBeUndefined();\n            }\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["format","fc","describe","expect","it","ConsumedWorkersPercentage","CreateUserId","ExecutionBudgetUnitId","FileName","FilePath","ProgressReportData","ProjectId","ProjectReportId","ReportText","Title","TotalPerformancePercentage","UploadUserId","WorkerId","YEAR_MONTH_DAY_FORMAT","YearMonthDay","MAX_FILE_NAME_LENGTH","File","ProgressCheckReport","UpdateProgressCheckReport","makeCreateProperty","record","id","uuid","version","createUserId","reportDate","date","min","Date","max","map","val","projectId","files","array","name","string","minLength","maxLength","trim","filter","length","path","webUrl","uploadUserId","title","reportText","executionBudgetUnitId","progressReportData","object","key","includes","values","maxDepth","maxKeys","totalPerformancePercentage","stringMatching","consumedWorkersPercentage","workerIds","from","file","makeUpdateProperty","option","nil","undefined","assert","property","args","entity","toBeInstanceOf","value","toEqual","toString","arrayContaining","createArgs","updateArgs","update","toBeUndefined"],"mappings":"AAAA,SAASA,MAAM,QAAQ,WAAW;AAClC,OAAOC,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SACEC,yBAAyB,EACzBC,YAAY,EACZC,qBAAqB,EACrBC,QAAQ,EACRC,QAAQ,EACRC,kBAAkB,EAClBC,SAAS,EACTC,eAAe,EACfC,UAAU,EACVC,KAAK,EACLC,0BAA0B,EAC1BC,YAAY,EACZC,QAAQ,EACRC,qBAAqB,EACrBC,YAAY,QACP,oBAAW;AAClB,SAASC,oBAAoB,QAAQ,gCAA6B;AAElE,SAASC,IAAI,EAAEC,mBAAmB,EAAEC,yBAAyB,QAAQ,aAAI;AAEzE,SAASC;IACP,OAAOvB,GACJwB,MAAM,CAAC;QACNC,IAAIzB,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE;QACzBC,cAAc5B,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE;QACnCE,YAAY7B,GACT8B,IAAI,CAAC;YACJC,KAAK,IAAIC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;YAC7BC,KAAK,IAAID,KAAK,MAAM,IAAI,IAAI,IAAI,IAAI;QACtC,GACCE,GAAG,CAAC,CAACC,MAAQpC,OAAOoC,KAAKlB;QAC5BmB,WAAWpC,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE;QAChCU,OAAOrC,GAAGsC,KAAK,CACbtC,GAAGwB,MAAM,CAAC;YACRe,MAAMvC,GACHwC,MAAM,CAAC;gBAAEC,WAAW;gBAAGC,WAAWvB;YAAqB,GACvDe,GAAG,CAAC,CAACC,MAAQA,IAAIQ,IAAI,IACrBC,MAAM,CAAC,CAACT,MAAQA,IAAIU,MAAM,IAAI;YACjCC,MAAM9C,GAAG+C,MAAM;YACfC,cAAchD,GAAG0B,IAAI,CAAC;gBAAEC,SAAS;YAAE;QACrC,IACA;YAAEc,WAAW;QAAE;QAEjBQ,OAAOjD,GACJwC,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBP,GAAG,CAAC,CAACC,MAAQA,IAAIQ,IAAI,IACrBC,MAAM,CAAC,CAACT,MAAQA,IAAIU,MAAM,IAAI;QACjCK,YAAYlD,GACTwC,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBP,GAAG,CAAC,CAACC,MAAQA,IAAIQ,IAAI,IACrBC,MAAM,CAAC,CAACT,MAAQA,IAAIU,MAAM,IAAI;QACjCM,uBAAuBnD,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE;QAC5CyB,oBAAoBpD,GAAGqD,MAAM,CAAC;YAC5BC,KAAKtD,GACFwC,MAAM,CAAC;gBAAEE,WAAW;YAAG,GACvBE,MAAM,CACL,CAACT,MACC,CAAC;oBACC;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD,CAACoB,QAAQ,CAACpB;YAEjBqB,QAAQ;gBAACxD,GAAGwC,MAAM,CAAC;oBAAEE,WAAW;gBAAI;aAAG;YACvCe,UAAU;YACVC,SAAS;QACX;QACAC,4BAA4B3D,GAAG4D,cAAc,CAAC;QAC9CC,2BAA2B7D,GAAG4D,cAAc,CAAC;QAC7CE,WAAW9D,GAAGsC,KAAK,CAACtC,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE,IAAI;YAAEc,WAAW;QAAE;IAC9D,GACCP,GAAG,CACF,CAAC,EACCT,EAAE,EACFG,YAAY,EACZC,UAAU,EACVO,SAAS,EACTC,KAAK,EACLY,KAAK,EACLC,UAAU,EACVC,qBAAqB,EACrBC,kBAAkB,EAClBO,0BAA0B,EAC1BE,yBAAyB,EACzBC,SAAS,EACV,GAAM,CAAA;YACLrC,IAAId,gBAAgBoD,IAAI,CAACtC;YACzBG,cAAcvB,aAAa0D,IAAI,CAACnC;YAChCC,YAAYX,aAAa6C,IAAI,CAAClC;YAC9BO,WAAW1B,UAAUqD,IAAI,CAAC3B;YAC1BC,OAAOA,MAAMH,GAAG,CACd,CAAC8B,OACC,IAAI5C,KAAK;oBACPmB,MAAMhC,SAASwD,IAAI,CAACC,KAAKzB,IAAI;oBAC7BO,MAAMtC,SAASuD,IAAI,CAACC,KAAKlB,IAAI;oBAC7BE,cAAcjC,aAAagD,IAAI,CAACC,KAAKhB,YAAY;gBACnD;YAEJC,OAAOpC,MAAMkD,IAAI,CAACd;YAClBC,YAAYtC,WAAWmD,IAAI,CAACb;YAC5BC,uBAAuB7C,sBAAsByD,IAAI,CAC/CZ;YAEFC,oBAAoB3C,mBAAmBsD,IAAI,CAACX;YAC5CO,4BAA4B7C,2BAA2BiD,IAAI,CACzDJ;YAEFE,2BAA2BzD,0BAA0B2D,IAAI,CACvDF;YAEFC,WAAWA,UAAU5B,GAAG,CAAC,CAACT,KAAOT,SAAS+C,IAAI,CAACtC;QACjD,CAAA;AAEN;AACA,SAASwC;IACP,OAAOjE,GACJwB,MAAM,CAAC;QACNI,cAAc5B,GAAGkE,MAAM,CAAClE,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE,IAAI;YAAEwC,KAAKC;QAAU;QAClEvC,YAAY7B,GAAGkE,MAAM,CACnBlE,GACG8B,IAAI,CAAC;YACJC,KAAK,IAAIC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;YAC7BC,KAAK,IAAID,KAAK,MAAM,IAAI,IAAI,IAAI,IAAI;QACtC,GACCE,GAAG,CAAC,CAACC,MAAQpC,OAAOoC,KAAKlB,yBAC5B;YAAEkD,KAAKC;QAAU;QAEnBhC,WAAWpC,GAAGkE,MAAM,CAAClE,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE,IAAI;YAAEwC,KAAKC;QAAU;QAC/D/B,OAAOrC,GAAGkE,MAAM,CACdlE,GAAGsC,KAAK,CACNtC,GAAGwB,MAAM,CAAC;YACRe,MAAMvC,GACHwC,MAAM,CAAC;gBAAEC,WAAW;gBAAGC,WAAWvB;YAAqB,GACvDe,GAAG,CAAC,CAACC,MAAQA,IAAIQ,IAAI,IACrBC,MAAM,CAAC,CAACT,MAAQA,IAAIU,MAAM,IAAI;YACjCC,MAAM9C,GAAG+C,MAAM;YACfC,cAAchD,GAAG0B,IAAI,CAAC;gBAAEC,SAAS;YAAE;QACrC,IACA;YAAEc,WAAW;QAAE,IAEjB;YAAE0B,KAAKC;QAAU;QAEnBnB,OAAOjD,GAAGkE,MAAM,CACdlE,GACGwC,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBP,GAAG,CAAC,CAACC,MAAQA,IAAIQ,IAAI,IACrBC,MAAM,CAAC,CAACT,MAAQA,IAAIU,MAAM,IAAI,IACjC;YAAEsB,KAAKC;QAAU;QAEnBlB,YAAYlD,GAAGkE,MAAM,CACnBlE,GACGwC,MAAM,CAAC;YAAEC,WAAW;QAAE,GACtBP,GAAG,CAAC,CAACC,MAAQA,IAAIQ,IAAI,IACrBC,MAAM,CAAC,CAACT,MAAQA,IAAIU,MAAM,IAAI,IACjC;YAAEsB,KAAKC;QAAU;QAEnBjB,uBAAuBnD,GAAGkE,MAAM,CAAClE,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE,IAAI;YACxDwC,KAAKC;QACP;QACAhB,oBAAoBpD,GAAGkE,MAAM,CAC3BlE,GAAGqD,MAAM,CAAC;YACRC,KAAKtD,GACFwC,MAAM,CAAC;gBAAEE,WAAW;YAAG,GACvBE,MAAM,CACL,CAACT,MACC,CAAC;oBACC;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBACD,CAACoB,QAAQ,CAACpB;YAEjBqB,QAAQ;gBAACxD,GAAGwC,MAAM,CAAC;oBAAEE,WAAW;gBAAI;aAAG;YACvCe,UAAU;YACVC,SAAS;QACX,IACA;YAAES,KAAKC;QAAU;QAEnBT,4BAA4B3D,GAAGkE,MAAM,CACnClE,GAAG4D,cAAc,CAAC,2BAClB;YAAEO,KAAKC;QAAU;QAEnBP,2BAA2B7D,GAAGkE,MAAM,CAClClE,GAAG4D,cAAc,CAAC,2BAClB;YAAEO,KAAKC;QAAU;QAEnBN,WAAW9D,GAAGkE,MAAM,CAClBlE,GAAGsC,KAAK,CAACtC,GAAG0B,IAAI,CAAC;YAAEC,SAAS;QAAE,IAAI;YAAEc,WAAW;QAAE,IACjD;YAAE0B,KAAKC;QAAU;IAErB,GACClC,GAAG,CACF,CAAC,EACCN,YAAY,EACZC,UAAU,EACVO,SAAS,EACTC,KAAK,EACLY,KAAK,EACLC,UAAU,EACVC,qBAAqB,EACrBC,kBAAkB,EAClBO,0BAA0B,EAC1BE,yBAAyB,EACzBC,SAAS,EACV,GAAM,CAAA;YACLlC,cAAcA,eACVvB,aAAa0D,IAAI,CAACnC,gBAClBwC;YACJvC,YAAYA,aAAaX,aAAa6C,IAAI,CAAClC,cAAcuC;YACzDhC,WAAWA,YAAY1B,UAAUqD,IAAI,CAAC3B,aAAagC;YACnD/B,OAAOA,OAAOH,IACZ,CAAC8B,OACC,IAAI5C,KAAK;oBACPmB,MAAMhC,SAASwD,IAAI,CAACC,KAAKzB,IAAI;oBAC7BO,MAAMtC,SAASuD,IAAI,CAACC,KAAKlB,IAAI;oBAC7BE,cAAcjC,aAAagD,IAAI,CAACC,KAAKhB,YAAY;gBACnD;YAEJC,OAAOA,QAAQpC,MAAMkD,IAAI,CAACd,SAASmB;YACnClB,YAAYA,aAAatC,WAAWmD,IAAI,CAACb,cAAckB;YACvDjB,uBAAuBA,wBACnB7C,sBAAsByD,IAAI,CAACZ,yBAC3BiB;YACJhB,oBAAoBA,qBAChB3C,mBAAmBsD,IAAI,CAACX,sBACxBgB;YACJT,4BAA4BA,6BACxB7C,2BAA2BiD,IAAI,CAACJ,8BAChCS;YACJP,2BAA2BA,4BACvBzD,0BAA0B2D,IAAI,CAACF,6BAC/BO;YACJN,WAAWA,WAAW5B,IAAI,CAACT,KAAOT,SAAS+C,IAAI,CAACtC;QAClD,CAAA;AAEN;AAEAxB,SAAS,uBAAuB;IAC9BE,GAAG,yDAAyD;QAC1DH,GAAGqE,MAAM,CACPrE,GAAGsE,QAAQ,CAAC/C,sBAAsB,CAACgD;YACjC,MAAMC,SAAS,IAAInD,oBAAoBkD;YACvCrE,OAAOsE,QAAQC,cAAc,CAACpD;YAE9BnB,OAAOsE,OAAO/C,EAAE,CAACiD,KAAK,EAAEC,OAAO,CAACJ,KAAK9C,EAAE,CAACiD,KAAK;YAC7CxE,OAAOsE,OAAO5C,YAAY,CAAC8C,KAAK,EAAEC,OAAO,CAACJ,KAAK3C,YAAY,CAAC8C,KAAK;YACjExE,OAAOsE,OAAO3C,UAAU,CAAC+C,QAAQ,IAAID,OAAO,CAC1CJ,KAAK1C,UAAU,CAAC+C,QAAQ;YAE1B1E,OAAOsE,OAAOpC,SAAS,CAACsC,KAAK,EAAEC,OAAO,CAACJ,KAAKnC,SAAS,CAACsC,KAAK;YAC3DxE,OAAOsE,OAAOnC,KAAK,EAAEsC,OAAO,CAACzE,OAAO2E,eAAe,CAACN,KAAKlC,KAAK;YAC9DnC,OAAOsE,OAAOvB,KAAK,CAACyB,KAAK,EAAEC,OAAO,CAACJ,KAAKtB,KAAK,CAACyB,KAAK;YACnDxE,OAAOsE,OAAOtB,UAAU,CAACwB,KAAK,EAAEC,OAAO,CAACJ,KAAKrB,UAAU,CAACwB,KAAK;YAC7DxE,OAAOsE,OAAOrB,qBAAqB,CAACuB,KAAK,EAAEC,OAAO,CAChDJ,KAAKpB,qBAAqB,CAACuB,KAAK;YAElCxE,OAAOsE,OAAOpB,kBAAkB,CAACsB,KAAK,EAAEC,OAAO,CAC7CJ,KAAKnB,kBAAkB,CAACsB,KAAK;YAE/BxE,OAAOsE,OAAOb,0BAA0B,CAACe,KAAK,EAAEC,OAAO,CACrDJ,KAAKZ,0BAA0B,CAACe,KAAK;YAEvCxE,OAAOsE,OAAOX,yBAAyB,CAACa,KAAK,EAAEC,OAAO,CACpDJ,KAAKV,yBAAyB,CAACa,KAAK;YAEtCxE,OAAOsE,OAAOV,SAAS,CAAC5B,GAAG,CAAC,CAACT,KAAOA,GAAGiD,KAAK,GAAGC,OAAO,CACpDJ,KAAKT,SAAS,CAAC5B,GAAG,CAAC,CAACT,KAAOA,GAAGiD,KAAK;QAEvC;IAEJ;IACAzE,SAAS,UAAU;QACjBE,GAAG,+DAA+D;YAChEH,GAAGqE,MAAM,CACPrE,GAAGsE,QAAQ,CACTtE,GAAGwB,MAAM,CAAC;gBACRsD,YAAYvD;gBACZwD,YAAYd;YACd,IACA,CAAC,EAAEa,UAAU,EAAEC,UAAU,EAAE;gBACzB,MAAMP,SAAS,IAAInD,oBAAoByD;gBACvC5E,OAAOsE,QAAQC,cAAc,CAACpD;gBAE9B,MAAM2D,SAASR,OAAOQ,MAAM,CAACD;gBAC7B7E,OAAO8E,QAAQP,cAAc,CAACnD;gBAC9BpB,OAAO8E,OAAOvD,EAAE,CAACiD,KAAK,EAAEC,OAAO,CAACH,OAAO/C,EAAE,CAACiD,KAAK;gBAC/CxE,OAAO8E,OAAOpD,YAAY,EAAE8C,OAAOC,OAAO,CACxCI,WAAWnD,YAAY,EAAE8C;gBAE3BxE,OAAO8E,OAAOnD,UAAU,EAAE+C,YAAYD,OAAO,CAC3CI,WAAWlD,UAAU,EAAE+C;gBAEzB,IAAIG,WAAW1C,KAAK,EAAE;oBACpBnC,OAAO8E,OAAO3C,KAAK,EAAEsC,OAAO,CAC1BzE,OAAO2E,eAAe,CAACE,WAAW1C,KAAK;gBAE3C,OAAO;oBACLnC,OAAO8E,OAAO3C,KAAK,EAAE4C,aAAa;gBACpC;gBACA/E,OAAO8E,OAAO/B,KAAK,EAAEyB,OAAOC,OAAO,CAACI,WAAW9B,KAAK,EAAEyB;gBACtDxE,OAAO8E,OAAO9B,UAAU,EAAEwB,OAAOC,OAAO,CACtCI,WAAW7B,UAAU,EAAEwB;gBAEzBxE,OAAO8E,OAAO7B,qBAAqB,EAAEuB,OAAOC,OAAO,CACjDI,WAAW5B,qBAAqB,EAAEuB;gBAEpCxE,OAAO8E,OAAO5B,kBAAkB,EAAEsB,OAAOC,OAAO,CAC9CI,WAAW3B,kBAAkB,EAAEsB;gBAEjCxE,OAAO8E,OAAOrB,0BAA0B,EAAEe,OAAOC,OAAO,CACtDI,WAAWpB,0BAA0B,EAAEe;gBAEzCxE,OAAO8E,OAAOnB,yBAAyB,EAAEa,OAAOC,OAAO,CACrDI,WAAWlB,yBAAyB,EAAEa;gBAExC,IAAIK,WAAWjB,SAAS,EAAE;oBACxB5D,OAAO8E,OAAOlB,SAAS,EAAEa,OAAO,CAC9BzE,OAAO2E,eAAe,CAACE,WAAWjB,SAAS;gBAE/C,OAAO;oBACL5D,OAAO8E,OAAOlB,SAAS,EAAEmB,aAAa;gBACxC;YACF;QAGN;IACF;AACF"}